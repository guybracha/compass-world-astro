---
// src/pages/comics/[slug].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { formatHeDate } from "../../lib/dates"; // פורמט תאריך בעברית (מההודעה הקודמת)

export const prerender = true;

// 1) נתיבים סטטיים
export async function getStaticPaths() {
  const all = await getCollection("comics");
  const sorted = all
    .slice()
    .sort((a, b) => {
      const na = Number(a.data.number ?? 0);
      const nb = Number(b.data.number ?? 0);
      return na === nb ? a.slug.localeCompare(b.slug) : na - nb;
    });

  return sorted.map((e, i) => ({
    params: { slug: e.slug },
    props: {
      entry: e,
      prev: i > 0 ? sorted[i - 1] : null,
      next: i < sorted.length - 1 ? sorted[i + 1] : null,
    },
  }));
}

// 2) פרופס (לעשות קודם!)
const { entry, prev, next } = Astro.props;

// 3) כל השימושים ב־entry מגיעים רק אחרי ההגדרה
const title = `עולם המצפן | ${entry.data.title}`;
const desc = entry.data.summary ?? "";
const niceDate = formatHeDate(entry.data.date);

// BASE-URL handling (GitHub Pages / subpath-safe)
const BASE = import.meta.env.BASE_URL || "/";
const withBase = (p = "") =>
  p.startsWith("http")
    ? p
    : `${BASE.replace(/\/$/, "")}${p.startsWith("/") ? p : `/${p}`}`;

const PLACEHOLDER = "/images/gallery-placeholder.svg";
const placeholderWithBase = withBase(PLACEHOLDER);

// Map page image paths with base
const pages = Array.isArray(entry.data.pages) ? entry.data.pages.map(withBase) : [];
const coverSrc = withBase(entry.data.cover ?? PLACEHOLDER);

// Absolute URL for JSON-LD image
const imageAbs = new URL(coverSrc, Astro.url).href;
---
<BaseLayout title={title} class="dark">
  <section class="container-xxl py-4">
    <nav class="mb-3">
      <a href={withBase("/comics/")} class="text-decoration-none text-secondary">
        <i class="bi bi-arrow-right-short"></i> חזרה לרשימת הקומיקס
      </a>
    </nav>

    <header class="mb-4 text-center">
      {typeof entry.data.number !== "undefined" && (
        <div class="text-warning fw-semibold">פרק #{entry.data.number}</div>
      )}
      <h1 class="display-6 fw-bold font-display-he">{entry.data.title}</h1>
      {niceDate ? <p class="text-secondary small">פורסם {niceDate}</p> : null}
      {desc && <p class="text-secondary">{desc}</p>}

      <div class="d-flex justify-content-center gap-2 mt-3">
        {prev ? (
          <a class="btn btn-outline-light btn-sm" href={withBase(`/comics/${prev.slug}/`)}>
            <i class="bi bi-arrow-right"></i> קודם
          </a>
        ) : null}
            <a class="btn btn-brand btn-sm btn-display-he" href={withBase("/comics/")}>כל הפרקים</a>
        {next ? (
          <a class="btn btn-outline-light btn-sm" href={withBase(`/comics/${next.slug}/`)}>
            הבא <i class="bi bi-arrow-left"></i>
          </a>
        ) : null}
      </div>
    </header>

    {/* === Reader === */}
    <article class="reader mx-auto" style="max-width: 980px;">
      {pages.length === 0 ? (
        <div class="alert alert-warning">לא נמצאו עמודים לפרק זה.</div>
      ) : (
        pages.map((src, i) => (
          <figure class="mb-4 page" data-page={i+1}>
            <img
              src={src}
              alt={`${entry.data.title} — עמוד ${i + 1}`}
              loading="lazy"
              decoding="async"
              fetchpriority="low"
              class="img-fluid rounded shadow-sm w-100 page-img"
              width="980"
              onerror={`this.onerror=null;this.src='${placeholderWithBase}';`}
            />
            <figcaption class="text-center text-secondary small mt-2">עמוד {i + 1}</figcaption>
          </figure>
        ))
      )}
    </article>

    {/* Floating Pager */}
    <div class="pager" aria-label="ניווט עמודים">
      <button class="pager-btn" id="prevPage" type="button" title="עמוד קודם (←)">&#x25C0;</button>
      <div class="pager-count"><span id="curPage">1</span>/<span id="totalPages">{pages.length}</span></div>
      <button class="pager-btn" id="nextPage" type="button" title="עמוד הבא (→)">&#x25B6;</button>
    </div>

    <footer class="mt-4 d-flex justify-content-between">
      {prev ? (
        <a class="btn btn-outline-light" href={withBase(`/comics/${prev.slug}/`)}>
          <i class="bi bi-arrow-right"></i> {prev.data.title}
        </a>
      ) : <span/>}
      {next ? (
        <a class="btn btn-outline-light" href={withBase(`/comics/${next.slug}/`)}>
          {next.data.title} <i class="bi bi-arrow-left"></i>
        </a>
      ) : <span/>}
    </footer>
  </section>

  <!-- JSON-LD for SEO -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "ComicSeries",
      "name": "עולם המצפן — קומיקס",
      "hasPart": {
        "@type": "ComicIssue",
        "issueNumber": entry.data.number,
        "name": entry.data.title,
        "datePublished": entry.data.date || undefined,
        "image": imageAbs,
        "genre": entry.data.tags || [],
        "description": desc
      }
    })}
  </script>

  <!-- Reader UX: fade-in + smooth page transitions + keyboard/click nav -->
  <script is:inline>
    (() => {
      const figures = Array.from(document.querySelectorAll(".reader .page"));
      const imgs = Array.from(document.querySelectorAll(".reader .page-img"));
      const total = figures.length;
      const curEl = document.getElementById("curPage");
      const btnPrev = document.getElementById("prevPage");
      const btnNext = document.getElementById("nextPage");
      if (!total) return;

      // Fade-in on first paint via IntersectionObserver
      const io = new IntersectionObserver((entries) => {
        for (const e of entries) {
          if (e.isIntersecting) {
            e.target.classList.add("in");
            io.unobserve(e.target);
          }
        }
      }, { rootMargin: "0px 0px -10% 0px", threshold: 0.05 });
      imgs.forEach(img => io.observe(img));

      // Helper: clamp + smooth scroll to page
      const clamp = (n, min, max) => Math.max(min, Math.min(max, n));
      const toIdx = (idx) => {
        idx = clamp(idx, 0, total - 1);
        const el = figures[idx];
        if (!el) return;
        // Preload next image to reduce flicker
        const nextImg = figures[idx + 1]?.querySelector("img")?.getAttribute("src");
        if (nextImg) { const p = new Image(); p.src = nextImg; }
        el.scrollIntoView({ behavior: "smooth", block: "start" });
      };

      // Track current page by closest figure to viewport top
      let current = 0;
      const updateByScroll = () => {
        let best = 0, bestDist = Infinity;
        figures.forEach((f, i) => {
          const d = Math.abs(f.getBoundingClientRect().top);
          if (d < bestDist) { best = i; bestDist = d; }
        });
        current = best;
        if (curEl) curEl.textContent = String(current + 1);
        btnPrev?.toggleAttribute("disabled", current === 0);
        btnNext?.toggleAttribute("disabled", current === total - 1);
      };
      updateByScroll();
      window.addEventListener("scroll", () => { window.requestAnimationFrame(updateByScroll); }, { passive: true });

      // Click image -> next page
      imgs.forEach((img, i) => {
        img.addEventListener("click", () => toIdx(i + 1));
      });

      // Pager buttons
      btnPrev?.addEventListener("click", () => toIdx(current - 1));
      btnNext?.addEventListener("click", () => toIdx(current + 1));

      // Keyboard arrows
      window.addEventListener("keydown", (e) => {
        if (e.key === "ArrowRight") { e.preventDefault(); toIdx(current + 1); }
        if (e.key === "ArrowLeft")  { e.preventDefault(); toIdx(current - 1); }
      });

      // Optional: crossfade hint when navigating via buttons/keys
      const addFlash = (i) => {
        const el = figures[i]?.querySelector(".page-img");
        if (!el) return;
        el.classList.remove("flash");
        void el.offsetWidth; // restart animation
        el.classList.add("flash");
      };
      btnPrev?.addEventListener("click", () => addFlash(clamp(current - 1, 0, total - 1)));
      btnNext?.addEventListener("click", () => addFlash(clamp(current + 1, 0, total - 1)));
      window.addEventListener("keydown", (e) => {
        if (e.key === "ArrowRight") addFlash(clamp(current + 1, 0, total - 1));
        if (e.key === "ArrowLeft")  addFlash(clamp(current - 1, 0, total - 1));
      });
    })();
  </script>

  <style>
    /* Image reveal on enter */
    .page-img {
      opacity: 0;
      transform: translateY(8px) scale(0.995);
      transition: opacity .35s ease, transform .35s ease, filter .35s ease;
      background: #111;
    }
    .page-img.in { opacity: 1; transform: none; }

    /* Subtle flash (crossfade hint) when navigating via pager/keys */
    .page-img.flash { animation: pageFlash .22s ease; }
    @keyframes pageFlash {
      from { filter: brightness(0.88); }
      to   { filter: brightness(1); }
    }

    /* Floating pager */
    .pager {
      position: sticky;
      bottom: 20px;
      display: inline-flex;
      gap: .5rem;
      align-items: center;
      margin: 1rem auto 0;
      padding: .4rem .6rem;
      border-radius: 999px;
      background: rgba(0,0,0,.55);
      backdrop-filter: blur(6px);
      border: 1px solid rgba(255,255,255,.12);
      box-shadow: 0 8px 30px rgba(0,0,0,.35);
      width: fit-content;
    }
    .pager-btn {
      appearance: none;
      border: 1px solid rgba(255,255,255,.2);
      background: rgba(255,255,255,.06);
      color: #fff;
      border-radius: 999px;
      width: 36px; height: 36px;
      font-size: 16px;
      line-height: 1;
      display: grid; place-items: center;
      transition: transform .15s ease, background .15s ease, border-color .15s ease, opacity .15s ease;
    }
    .pager-btn:hover { transform: translateY(-1px); background: rgba(255,255,255,.1); }
    .pager-btn:disabled { opacity: .4; cursor: not-allowed; }
    .pager-count { color: #ddd; font-weight: 600; min-width: 64px; text-align: center; }
    .btn-display-he{
        font-family: var(--font-display-he);
        font-weight: 800;
        letter-spacing: .02em;
      }
  </style>
</BaseLayout>
