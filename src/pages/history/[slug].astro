---
// src/pages/history/[slug].astro
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getEntryBySlug, getCollection } from "astro:content";

export const prerender = true;

// תמיכה בתת-נתיב (GitHub Pages וכו’)
const BASE = import.meta.env.BASE_URL || "/";
const withBase = (p = "") =>
  p && !p.startsWith("http")
    ? `${BASE.replace(/\/$/, "")}${p.startsWith("/") ? p : `/${p}`}`
    : p || "";

// כותרת יפה מה-year או מה-slug אם חסר
function prettyYear(slug, dataYear) {
  const y = String(dataYear ?? "").trim();
  if (y) return y;
  const core = String(slug).replace(/^\d{1,4}-/, "");
  const parts = core.split("-").filter(Boolean);
  if (!parts.length) return slug;
  const last = parts[parts.length - 1];
  let era = "";
  if (/^(bc|bce|ad|ce)$/i.test(last)) { era = last.toUpperCase(); parts.pop(); }
  const label = parts.join("–");
  return era ? `${label} ${era}` : label;
}

export async function getStaticPaths() {
  const entries = await getCollection("history");
  return entries.map((e) => ({ params: { slug: e.slug } }));
}

const { slug } = Astro.params;
const entry = await getEntryBySlug("history", slug);
if (!entry) {
  return new Response(`Event not found: ${slug}`, { status: 404 });
}

const { Content, data } = await entry.render();
const yearLabel = prettyYear(slug, data?.year);
const desc = data?.description ?? "";

const LINK_BACK = withBase("/history/");
const PLACEHOLDER = withBase("/assets/placeholders/history.webp");
---
<BaseLayout title={`${yearLabel} | Chronology`} class="dark">
  <section class="container py-4">
    <a href={LINK_BACK} class="text-white-50">← Back</a>

    <header class="text-center my-3">
      <h1 class="h3 mb-2">{yearLabel}</h1>
      {desc && <p class="text-white-50 m-0">{desc}</p>}
    </header>

    <!-- מרנדרים את תוכן ה-MDX כפי שהוא -->
    <article class="prose text-white-80 mx-auto" style="max-width: 860px;">
      <Content />
    </article>
  </section>

  <style>
    .prose img { display:block; max-width:100%; height:auto; }
  </style>

  <script is:inline>
    // מעדכן את כל התמונות שבתוך ה-MDX: BASE_URL, מחלקות, lazy, ו-fallback
    (() => {
      const BASE = {JSON.stringify(BASE)};
      const PLACEHOLDER = {JSON.stringify(PLACEHOLDER)};
      const root = BASE.replace(/\/$/, "");

      document.querySelectorAll('.prose img').forEach((img) => {
        // מחלקות רספונסיביות
        img.classList.add('img-fluid', 'rounded-3', 'shadow-sm', 'my-3', 'w-100');
        // lazy
        img.loading = 'lazy';

        // הוספת BASE_URL אם זה נתיב יחסי/מוחלט מקומי
        const src = img.getAttribute('src') || '';
        if (src && !/^https?:\/\//i.test(src)) {
          const path = src.startsWith('/') ? src : `/${src}`;
          img.src = `${root}${path}`;
        }

        // fallback במקרה של 404
        img.addEventListener('error', () => {
          img.src = PLACEHOLDER;
        }, { once: true });
      });
    })();
  </script>
</BaseLayout>
